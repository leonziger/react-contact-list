{"version":3,"sources":["api/contacts/contacts.js","components/MoviesProvider/MoviesProvider.js","components/Contact/Contact.js","components/ContactsList/ContactsList.js","App.js","serviceWorker.js","index.js"],"names":["CONTACTS","id","name","phoneNumber","image","address","email","MoviesContext","React","createContext","MoviesProvider","children","contactsIds","objId","map","element","state","push","console","log","useState","displayedContacts","setDisplayedContacts","globalParams","activeIds","setActiveIds","Provider","value","Contact","item","useContext","isOpen","current","className","key","onClick","forEach","src","width","height","alt","style","ContactsList","type","onChange","event","searchQuery","target","toLowerCase","filter","el","indexOf","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b49026e6.chunk.js","sourcesContent":["export const CONTACTS = [\r\n    {\r\n        id: 1,\r\n        name: 'Darth Vader',\r\n        phoneNumber: '+250966666666',\r\n        image: '/img/darth.gif',\r\n        address: 'Death Star',\r\n        email: 'vader@starwars.com'\r\n    }, {\r\n        id: 2,\r\n        name: 'Princess Leia',\r\n        phoneNumber: '+250966344466',\r\n        image: '/img/leia.gif',\r\n        address: 'Corusand',\r\n        email: 'leia@starwars.com'\r\n    }, {\r\n        id: 3,\r\n        name: 'Luke Skywalker',\r\n        phoneNumber: '+250976654433',\r\n        image: '/img/luke.gif',\r\n        address: 'Tattuin',\r\n        email: 'luke@starwars.com'\r\n    }, {\r\n        id: 4,\r\n        name: 'Chewbacca',\r\n        phoneNumber: '+250456784935',\r\n        image: '/img/chewbacca.gif',\r\n        address: 'Kashiik',\r\n        email: 'chewy@starwars.com'\r\n    }\r\n];\r\n","import React, { useState } from 'react';\r\nimport { CONTACTS } from \"../../api/contacts\";\r\n\r\nexport const MoviesContext = React.createContext({});\r\n\r\nexport const MoviesProvider = ({ children }) => {\r\n    let contactsIds = [];\r\n    let objId = {};\r\n    CONTACTS.map(element => {\r\n        objId = {id: element.id, state: false};\r\n        contactsIds.push(objId);\r\n        return contactsIds;\r\n    });\r\n    console.log(contactsIds);\r\n\r\n    const [ displayedContacts, setDisplayedContacts ] = useState(CONTACTS);\r\n    const [ activeIds, setActiveIds ] = useState(contactsIds);\r\n\r\n    const globalParams = {\r\n        //vars\r\n        displayedContacts,\r\n        activeIds,\r\n\r\n        // functions\r\n        setDisplayedContacts,\r\n        setActiveIds\r\n    };\r\n\r\n    return (\r\n        <MoviesContext.Provider value={globalParams}>\r\n            {children}\r\n        </MoviesContext.Provider>\r\n    );\r\n};\r\n","import React, { useContext } from 'react';\r\nimport {MoviesContext} from \"../MoviesProvider\";\r\n\r\nexport const Contact = ({ item }) => {\r\n    const { activeIds, setActiveIds } = useContext( MoviesContext);\r\n    let isOpen = false;\r\n    let current = {};\r\n\r\n    const handleClick = (id) => {\r\n        activeIds.forEach((value)=> {\r\n            if (value.id === id) {\r\n                isOpen = !isOpen;\r\n                value.state = isOpen;\r\n                current.id = value.id;\r\n                current.state = value.state;\r\n            }\r\n        });\r\n        setActiveIds(activeIds);\r\n        console.log(current);\r\n        console.log(activeIds);\r\n        return current;\r\n    };\r\n\r\n    return(\r\n        <li className=\"contact\" key={item.id} onClick={() => handleClick(item.id)} >\r\n            <div className=\"contact-main\">\r\n                <img className=\"contact-image\" src={item.image} width=\"60px\" height=\"60px\" alt=\"\"/>\r\n                <div className=\"contact-name\">{item.name}</div>\r\n                <div className=\"contact-number\">{item.phoneNumber}</div>\r\n            </div>\r\n            {current.state ?\r\n                <div className=\"contact-additional\" style={{'display': 'block'}}>\r\n                    <div className=\"contact-number\">{item.address}</div>\r\n                    <div className=\"contact-number\">{item.email}</div>\r\n                </div>\r\n                :\r\n                <div className=\"contact-additional\" style={{'display': 'none'}}>\r\n                <div className=\"contact-number\">{item.address}</div>\r\n                <div className=\"contact-number\">{item.email}</div>\r\n                </div>\r\n            }\r\n        </li>\r\n    );\r\n};","import React, { useContext } from 'react';\r\nimport { CONTACTS } from '../../api/contacts';\r\nimport { Contact } from '../Contact';\r\nimport { MoviesContext } from '../MoviesProvider';\r\n\r\nexport const ContactsList = () => {\r\n    const { displayedContacts, setDisplayedContacts } = useContext(MoviesContext);\r\n\r\n    const handleSearch = (event) => {\r\n        const searchQuery = event.target.value.toLowerCase();\r\n        const displayedContacts = CONTACTS.filter(function(el) {\r\n            let searchValue = el.name.toLowerCase();\r\n            return searchValue.indexOf(searchQuery) !== -1;\r\n        });\r\n\r\n        setDisplayedContacts(displayedContacts);\r\n    };\r\n\r\n    return(\r\n        <div className=\"contacts\">\r\n            <input type=\"text\" className=\"search-field\" onChange={handleSearch}/>\r\n            <ul className=\"contacts-list\">\r\n                {\r\n                    displayedContacts.map((element) => <Contact\r\n                            item={element} key={element.id}\r\n                        />\r\n\r\n                    )\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n};","import React from 'react';\nimport './App.css';\nimport { MoviesProvider } from './components/MoviesProvider';\nimport { ContactsList } from './components/ContactsList';\n\nfunction App() {\n  return (\n      <MoviesProvider>\n        <div className=\"App\">\n            <ContactsList />\n        </div>\n      </MoviesProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('content')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}